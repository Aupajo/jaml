<h1>Jaml</h1>

Jaml is a small but delightful way of rendering HTML using JavaScript.  It uses a simple DSL to DRY up your code.

There are only 2 steps - registering a template and rendering it.  Let's look at something simple first:

<h2>Starting simple</h2>

Jaml.register('simple', function() {
  div(
    h1("Some title"),
    p("Some exciting paragraph text"),
    br(),
    
    ul(
      li("First item"),
      li("Second item"),
      li("Third item")
    )
  );
});

var output = Jaml.render('simple');

'output' now contains:

<div>
  <h1>Some title</h1>
  <p>Some exciting paragraph text</p>
  <br />
  
  <ul>
    <li>First item</li>
    <li>Second item</li>
    <li>Third item</li>
  </ul>
</div>

Pretty simple stuff.  Jaml knows how to render our tags and in what order, which tags are self closing, and so on.

Apart from slightly terser syntax, the main advantage here is that we can define HTML templates in JavaScript, instead
of having to worry about ugly string interpolation.

<h2>Templating</h2>

Let's say we want to render a product <div>.  Being good little programmers we'd like to separate our content from
our presentation so we register a product template like this:

Jaml.register('product', function(product) {
  div({cls: 'product'},
    h1(product.title),
    
    p(product.description),
    
    img({src: product.thumbUrl}),
    a({href: product.imageUrl}, 'View larger image'),
    
    form(
      label({for: 'quantity'}, "Quantity"),
      input({type: 'text', name: 'quantity', id: 'quantity', value: 1}),
      
      input({type: 'submit', value: 'Add to Cart'})
    )
  );
});

And here's the product we want to render:

var myProduct = {
  title      : 'Battlestar Galactica DVDs',
  thumbUrl   : 'thumbnail.png',
  imageUrl   : 'image.png',
  description: 'Best. Show. Evar.'
};

Rendering with this product gives us this:

<div class="product">
  <h1>Battlestar Galactica DVDs</h1>
  
  <p>Best. Show. Evar.</p>
  
  <img src="thumbnail.png" />
  <a href="image.png">View larger image</a>
  
  <form>
    <label for="quantity">Quantity</label>
    <input type="text" name="quantity" id="quantity" value="1" />
    
    <input type="submit" value="Add to Cart" />
  </form>
</div>

Above is the actual output from Jaml - the only change is adding linebreaks to correspond with the linebreaks in our template.

<h2>Collections</h2>

Let's say we have several products inside a Category. We can reuse our 'product' template within another, like this:

Jaml.register('category', function(category) {
  div({cls: 'category'},
    h1(category.name),
    p(category.products.length + " products in this category:"),
    
    div({cls: 'products'},
      Jaml.render('product', category.products)
    )
  );
});

var category = {
  name: 'Doovde',
  products: [
    myProduct, //from the example above
    {
      title      : 'Snow White',
      description: 'not so great actually'
    }
  ]
};

var output = Jaml.render('category', category);

'output' now contains:

<div class="category">
  <h1>Doovde</h1>
  <p>2 products in this category:</p>
  
  <div class="products">
    <div class="product">
      <h1>Battlestar Galactica DVDs</h1>
      .....
    </div>
    <div class="product">
      <h1>Snow White</h1>
      .....
    </div>
  </div>
</div>

Because category.products is an array, our call to Jaml.render('product', category.products) caused the product template to be rendered
once for each item in the array.

<h2>Layouts</h2>

Jaml supports rendering templates within other templates, which lets us easily remove repetitive layout structure.  Take this example:



Jaml.register('partial', function(data) {
  ul({id: 'menu'}, 
    li("first"),
    li("second"),
    li("third")
  );
});

Jaml.register('layout', function() {
  html(
    head(
      meta({'http-equiv': 'Content-type', content: 'text/html; charset=utf-8'}),
      title(data.title)
    ),
    body(
      div({id: 'header'},
        h1(a({href: '/'}, "My Site")),
        p("this is very pleasing")
      ),
      div({id: 'content'},
        h1("My Special Page"),
        p("This is a test page"),
        br(),
        
        Jaml.render("partial"),
        yield()
      )
    )
  );
});

Jaml.register('page', function(data) {
  h1("This is the page title");
  p("And here's some content");
  div({cls: 'myDiv'}, 
    ul(
      li('list'),
      li('of'),
      li('items')
    )
  );
});